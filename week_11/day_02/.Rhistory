library(rpart)
library(rpart.plot)
library(tidyverse)
library(tidyverse)
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
shuffle_index <- sample(1:nrow(titanic_set))
# shuffle the data so class order isn't in order - need this for training/testing split later on
titanic_set <- titanic_set[shuffle_index, ]
View(titanic_set)
skimr::skim(titanic_set)
skimr::skim(titanic_set)
glimpse(titanic_set)
titanic_clean %>%
filter(!is.na(survived))
titanic_set %>%
filter(!is.na(survived))
titanic_set %>%
filter(!is.na(survived)) %>%
summarise(is.na(survived))
titanic_clean <- titanic_set %>%
filter(!is.na(survived))
skimr::skim(titanic_set)
glimpse(titanic_set)
titanic_clean %>%
mutate(across(.col = c("sex", "survived", "pclass", "embarkation"), .fns = ~as.factor(.x)))
titanic_clean %>%
mutate(across(.col = c("sex", "survived", "pclass", "embarked"), .fns = ~as.factor(.x)))
titanic_clean <- titanic_clean %>%
mutate(across(.col = c("sex", "survived", "pclass", "embarked"), .fns = ~as.factor(.x)))
titanic_clean %>%
summarise(num = sum(is.na(age)))
dim(titanic_clean)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(tidyverse)
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
shuffle_index <- sample(1:nrow(titanic_set))
# shuffle the data so class order isn't in order - need this for training/testing split later on
titanic_set <- titanic_set[shuffle_index, ]
titanic_clean <- titanic_set %>%
filter(!is.na(survived))
titanic_clean <- titanic_clean %>%
mutate(sex = as.factor(sex),
age_status = as.factor(if_else(age <= 16, "child", "adult")),
class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarkation = as.factor(embarked)) %>%
select(sex, age_status, class, port_embarkation, sib_sp, parch, survived_flag) %>%
na.omit()
library(GGally)
ggpairs(titanic_clean, progress = FALSE)
library(tidyverse)
library(rpart)
library(rpart.plot)
thrones <- read_csv("data/character_data_S01-S08.csv")
head(thrones)
thrones <- thrones %>%
rename_with(.cols = starts_with("dth"), .fn = ~str_replace(.x, "dth", "met_dog"))
clean_thrones <- thrones %>%
# Only keep variables of interest
select(c(sex, religion, occupation, social_status, allegiance_last, allegiance_switched, met_dog_flag, featured_episode_count, prominence)) %>%
# Convert to factor level
mutate(sex = factor(sex, levels = c(1, 2, 9), labels = c("Male", "Female", "Unknown")),
religion = factor(religion, levels = c(0, 1, 3, 4, 5, 6, 7, 9), labels = c("Great Stallion", "Lord of Light", "Faith of the Seven", "Old Gods", "Drowned God", "Many Faced God", "Other", "Unknown")),
occupation = factor(occupation, levels = c(1, 2, 9), labels = c("Silk-collar", "Leather-collar", "Unknown")),
social_status = factor(social_status, levels = c(1, 2, 9), labels = c("Highborn", "Lowborn", "Unknown")),
allegiance_last = factor(allegiance_last, levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9), labels = c("Stark", "Targaryen", "Night's Watch", "Lannister", "Greyjoy", "Bolton", "Frey", "Other", "Unknown")),
allegiance_switched = factor(allegiance_switched, levels = c(1, 2, 9), labels = c("No", "Yes", "Unknown")),
met_dog_flag = factor(met_dog_flag, levels = c(0, 1), labels = c( "Met a dog", "Didn't meet a dog"))) %>%
# Remove NAs
drop_na()
clean_thrones
set.seed(19)
#how many rows in total
n_data <- nrow(clean_thrones)
#create a test sample index
test_index <- sample(1:n_data, size = n_data*0.2)
# split the data
thrones_test <- slice(clean_thrones, test_index)
thrones_train <- slice(clean_thrones, -test_index)
thrones_test %>%
janitor::tabyl(met_dog_flag)
thrones_train %>%
janitor::tabyl(met_dog_flag)
# 1. make tree model
thrones_fit <- rpart(
formula = met_dog_flag ~., #include all variables
data = thrones_train,
method = "class" # for a categorical predictor
)
# 2. plot tree model
rpart.plot(thrones_fit,
yesno = 2, # this writes yes/no at all splits
type = 2, #dictates where our conditions lie at each node
fallen.leaves = TRUE, # TRUE means leaves all alligned at bottom
faclen = 6, #length of factor names
digits = 2, # how many decimal places is prob reported in
split.border.col = 1 #colour
)
rpart.plot(thrones_fit,
yesno = 2,
type = 2,
fallen.leaves = TRUE,
faclen = 6,
digits = 2,
extra = 101 # displays the number and % of observations in the node
)
rpart.rules(thrones_fit, cover = TRUE)
library(modelr)
#add the predictions
thrones_test_pred <- thrones_test %>%
add_predictions(thrones_fit, type = "class")
thrones_test_pred %>%
select(prominence, religion, allegiance_last, featured_episode_count, met_dog_flag, pred)
library(yardstick)
conf_mat <- thrones_test_pred %>%
conf_mat(truth = met_dog_flag, estimate = pred)
conf_mat
accuracy <- thrones_test_pred %>%
accuracy(truth = met_dog_flag, estimate = pred)
accuracy
sensitivity <- thrones_test_pred %>%
sensitivity(truth = met_dog_flag, estimate = pred)
sensitivity
specificity <- thrones_test_pred %>%
specificity(truth = met_dog_flag, estimate = pred)
specificity
library(ranger)
rf_classifier <- ranger(
formula = met_dog_flag ~.,
data = thrones_train,
importance = "impurity",
num.trees = 1000, #num of trees in the forest
mtry = 2, # num variables to consider at each node
min.node.size = 5 #minimum num of datapoints allowed at a node
)
rf_classifier
importance(rf_classifier)
#ranger doesn't work with add_predictions() so we have to use some dplyr
thrones_test_pred_rf <- thrones_test %>%
mutate(pred = predict(rf_classifier, data = thrones_test)$predictions, .after = met_dog_flag)
thrones_test_pred_rf
accuracy_rf <- thrones_test_pred_rf %>%
accuracy(truth = met_dog_flag, estimate = pred)
accuracy
accuracy_rf
sensitivity_rf <- thrones_test_pred_rf %>%
sensitivity(truth = met_dog_flag, estimate = pred)
sensitivity
sensitivity_rf
specificity_rf <- thrones_test_pred_rf %>%
specificity(truth = met_dog_flag, estimate = pred)
specificity
specificity_rf
set.seed(19)
#how many rows in total
n_data <- nrow(titanic_clean)
#create a test sample index
test_index <- sample(1:n_data, size = n_data*0.2)
# split the data
titanic_test <- slice(titanic_clean, test_index)
titanic_train <- slice(titanic_clean, -test_index)
plot(titanic_clean)
dim(titanic_clean)
set.seed(19)
#how many rows in total
n_data <- nrow(titanic_clean)
#create a test sample index
test_index <- sample(1:n_data, size = n_data*0.1)
# split the data
titanic_test <- slice(titanic_clean, test_index)
titanic_train <- slice(titanic_clean, -test_index)
?set.seed
titanic_test %>%
janitor::tabyl(survived_flag)
titanic_train %>%
janitor::tabyl(survived_flag)
# 1. make tree model
titanic_fit <- rpart(
formula = survived_flag ~., #include all variables
data = titanic_clean,
method = "class" # for a categorical predictor
)
# 2. plot tree model
rpart.plot(titanic_fit,
yesno = 2, # this writes yes/no at all splits
type = 2, #dictates where our conditions lie at each node
fallen.leaves = TRUE, # TRUE means leaves all alligned at bottom
faclen = 6, #length of factor names
digits = 2, # how many decimal places is prob reported in
split.border.col = 1 #colour
)
titanic_pred <- titanic_test %>%
add_predictions(titanic_fit, type = 'class')
titanic_test_pred %>%
conf_mat(truth = survived_flag, estimate = pred)
titanic_pred %>%
conf_mat(truth = survived_flag, estimate = pred)
accuracy <- titanic_pred %>%
accuracy(truth = survived_flag, estimate = pred)
accuracy
sensitivity <- titanic_pred %>%
sensitivity(truth = survived_flag, estimate = pred)
sensitivity
specificity <- titanic_pred %>%
specificity(truth = survived_flag, estimate = pred)
specificity
