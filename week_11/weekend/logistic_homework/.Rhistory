mutate(log_purchase, purchase == "CH")
orange_juice %>%
mutate(purchase, purchase == "CH")
orange_juice %>%
mutate(purchase, log_purchase = purchase == "CH")
orange_juice %>%
mutate(purchase, log_purchase = purchase == "CH", .after = purchase)
orange_juice %>%
mutate(purchase, logic_purchase = purchase == "CH", .after = purchase)
orange_tidy <- orange_juice %>%
mutate(purchase, logic_purchase = purchase == "CH", .after = purchase)
library(modelr)
orange_juice %>%
mutate(purchase, as.logical(purchase))
orange_juice %>%
mutate(special_cm = as.logical(special_cm)) %>%
mutate(special_mm = as.logical(special_mm)) %>% #I need the purchase variable to be two-categorical for applying logist. regr.
mutate(store7 = store7 == "Yes")
orange_juice %>%
mutate(special_ch = as.logical(special_ch)) %>%
mutate(special_mm = as.logical(special_mm)) %>% #I need the purchase variable to be two-categorical for applying logist. regr.
mutate(store7 = store7 == "Yes")
orange_juice %>%
distinct(store)
orange_juice %>%
distinct(store_id)
orange_tidy <- orange_juice %>%
mutate(special_ch = as.logical(special_ch)) %>%
mutate(special_mm = as.logical(special_mm)) %>% #I need the purchase variable to be two-categorical for applying logist. regr.
mutate(store7 = store7 == "Yes") %>%
mutate(store = as.factor(store)) %>%
mutate(store_id = as.factor(store_id))
orange_tidy
orange_tidy %>%
group_by(purchase) %>%
summarise(sum = n())
orange_tidy %>%
group_by(weekof_purchase) %>%
summarise(sum = n())
library(GGally)
orange_tidy %>%
select(purchase, special_ch, special_mm, weekof_purchase) %>%
ggpairs(progress = FALSE)
orange_tidy %>%
muatate(weekof_purchase = as.factor(weekof_purchase))
orange_tidy %>%
mutate(weekof_purchase = as.factor(weekof_purchase))
orange_tidy <- orange_tidy %>%
mutate(weekof_purchase = as.factor(weekof_purchase))
alias(purchase_mm ~., data = orange_tidy)
orange_tidy <- orange_tidy %>%
mutate(purchase_mm = purchase == "MM") %>%
select(-purchase)
alias(purchase_mm ~., data = orange_tidy)
library(tidyverse)
library(modelr)
#library(janitor)
orange_juice <- read_csv("data/orange_juice.csv") %>%
janitor::clean_names()
glimpse(orange_juice)
skimr::skim(orange_juice)
orange_juice %>%
distinct(store_id)
orange_tidy <- orange_juice %>%
mutate(special_ch = as.logical(special_ch)) %>%
mutate(special_mm = as.logical(special_mm)) %>%
mutate(store7 = store7 == "Yes") %>%
mutate(store = as.factor(store)) %>%
mutate(store_id = as.factor(store_id)) %>%
mutate(weekof_purchase = as.factor(weekof_purchase)) #I need the purchase variable to be two-categorical for applying logist. regr.
orange_tidy
library(tidyverse)
library(modelr)
#library(janitor)
orange_juice <- read_csv("data/orange_juice.csv") %>%
janitor::clean_names()
glimpse(orange_juice)
skimr::skim(orange_juice)
orange_juice %>%
distinct(store_id)
orange_tidy <- orange_juice %>%
mutate(special_ch = as.logical(special_ch)) %>%
mutate(special_mm = as.logical(special_mm)) %>%
mutate(store7 = store7 == "Yes") %>%
mutate(store = as.factor(store)) %>%
mutate(store_id = as.factor(store_id)) %>%
mutate(purchase_mm = purchase == "MM") %>% #I need the purchase variable to be two-categorical for applying logist. regr.
select(-purchase)
orange_tidy
orange_tidy %>%
group_by(weekof_purchase) %>%
summarise(sum = n())
orange_tidy %>%
select(purchase_mm, weekof_purchase) %>%
ggpairs(progress = FALSE)
library(GGally)
orange_tidy %>%
select(purchase_mm, weekof_purchase) %>%
ggpairs(progress = FALSE)
orange_tidy <- orange_tidy %>%
mutate(weekof_purchase = as.factor(weekof_purchase))
alias(purchase_mm ~., data = orange_tidy)
orange_tidy <- orange_tidy %>%
select(-c("sale_price_mm", "sale_price_ch", "price_diff", "store7", "list_of_price_diff", "store"))
orange_tidy <- orange_tidy %>%
select(-c("sale_price_mm", "sale_price_ch", "price_diff", "store7", "list_price_diff", "store"))
glimpse(orange_tidy)
orange_tidy %>%
select_if(is.numeric(.x))
orange_tidy %>%
select_if(is.numeric)
orange_num <- orange_tidy %>%
select_if(is.numeric)
orange_num$purchase_mm <- orange_tidy$purchase_mm
orange_tidy %>%
select_if(function(x) !is.numeric(x))
orange_cat <- orange_tidy %>%
select_if(function(x) !is.numeric(x))
ggpairs(orange_cat, progress = FALSE)
library(tidyverse)
library(modelr)
#library(janitor)
orange_juice <- read_csv("data/orange_juice.csv") %>%
janitor::clean_names()
glimpse(orange_juice)
skimr::skim(orange_juice)
orange_juice %>%
distinct(store_id)
orange_tidy <- orange_juice %>%
mutate(special_ch = as.logical(special_ch)) %>%
mutate(special_mm = as.logical(special_mm)) %>%
mutate(store7 = store7 == "Yes") %>%
mutate(store = as.factor(store)) %>%
mutate(store_id = as.factor(store_id)) %>%
mutate(purchase_mm = purchase == "MM") %>% #I need the purchase variable to be two-categorical for applying logist. regr.
select(-purchase)
orange_tidy
orange_tidy %>%
group_by(weekof_purchase) %>%
summarise(sum = n())
library(GGally)
orange_tidy %>%
select(purchase_mm, weekof_purchase) %>%
ggpairs(progress = FALSE)
orange_tidy <- orange_tidy %>%
mutate(weekof_purchase_fac = as.factor(weekof_purchase))
orange_tidy
alias(purchase_mm ~., data = orange_tidy)
orange_tidy <- orange_tidy %>%
select(-c("sale_price_mm", "sale_price_ch", "price_diff", "store7", "list_price_diff", "store"))
glimpse(orange_tidy)
orange_num <- orange_tidy %>%
select_if(is.numeric)
orange_num$purchase_mm <- orange_tidy$purchase_mm
orange_cat <- orange_tidy %>%
select_if(function(x) !is.numeric(x)) %>%
select(-weekof_purchase_fac)
ggpairs(orange_cat, progress = FALSE)
ggpairs(orange_num, progress = FALSE)
set.seed(42)
orange_index <- sample(1:nrow(orange_tidy), size = nrow(orange_tidy)*0.2)
test  <- slice(orange_tidy, orange_index)
train <- slice(orange_tidy, -orange_index)
train %>%
tabyl(purchase_mm)
library(modelr)
train %>%
tabyl(purchase_mm)
library(janitor)
train %>%
tabyl(purchase_mm)
test %>%
tabyl(purchase_mm)
set.seed(42)
orange_index <- sample(1:nrow(orange_tidy), size = nrow(orange_tidy)*0.25)
test  <- slice(orange_tidy, orange_index)
train <- slice(orange_tidy, -orange_index)
#library(modelr)
library(janitor)
train %>%
tabyl(purchase_mm)
test %>%
tabyl(purchase_mm)
set.seed(42)
orange_index <- sample(1:nrow(orange_tidy), size = nrow(orange_tidy)*0.2)
test  <- slice(orange_tidy, orange_index)
train <- slice(orange_tidy, -orange_index)
#library(modelr)
library(janitor)
train %>%
tabyl(purchase_mm)
test %>%
tabyl(purchase_mm)
orange_index <- sample(1:nrow(orange_tidy), size = nrow(orange_tidy)*0.2)
test  <- slice(orange_tidy, orange_index)
train <- slice(orange_tidy, -orange_index)
train %>%
tabyl(purchase_mm)
test %>%
tabyl(purchase_mm)
library(glmulti)
orange_tidy
train
orange_tidy <- orange_tidy %>%
select(-c("sale_price_mm", "sale_price_ch", "price_diff", "store7", "list_price_diff", "store", "weekof_purchase_fac"))
library(tidyverse)
library(modelr)
#library(janitor)
orange_juice <- read_csv("data/orange_juice.csv") %>%
janitor::clean_names()
glimpse(orange_juice)
skimr::skim(orange_juice)
orange_juice %>%
distinct(store_id)
orange_tidy <- orange_juice %>%
mutate(special_ch = as.logical(special_ch)) %>%
mutate(special_mm = as.logical(special_mm)) %>%
mutate(store7 = store7 == "Yes") %>%
mutate(store = as.factor(store)) %>%
mutate(store_id = as.factor(store_id)) %>%
mutate(purchase_mm = purchase == "MM") %>% #I need the purchase variable to be two-categorical for applying logist. regr.
select(-purchase)
orange_tidy
orange_tidy %>%
group_by(weekof_purchase) %>%
summarise(sum = n())
library(GGally)
orange_tidy %>%
select(purchase_mm, weekof_purchase) %>%
ggpairs(progress = FALSE)
orange_tidy <- orange_tidy %>%
mutate(weekof_purchase_fac = as.factor(weekof_purchase))
alias(purchase_mm ~., data = orange_tidy)
orange_tidy <- orange_tidy %>%
select(-c("sale_price_mm", "sale_price_ch", "price_diff", "store7", "list_price_diff", "store", "weekof_purchase_fac"))
glimpse(orange_tidy)
orange_num <- orange_tidy %>%
select_if(is.numeric)
orange_num$purchase_mm <- orange_tidy$purchase_mm
orange_cat <- orange_tidy %>%
select_if(function(x) !is.numeric(x)) %>%
select(-weekof_purchase_fac)
orange_num <- orange_tidy %>%
select_if(is.numeric)
orange_num$purchase_mm <- orange_tidy$purchase_mm
orange_cat <- orange_tidy %>%
select_if(function(x) !is.numeric(x))
ggpairs(orange_cat, progress = FALSE)
ggpairs(orange_num, progress = FALSE)
set.seed(42)
orange_index <- sample(1:nrow(orange_tidy), size = nrow(orange_tidy)*0.2)
test  <- slice(orange_tidy, orange_index)
train <- slice(orange_tidy, -orange_index)
#library(modelr)
library(janitor)
train %>%
tabyl(purchase_mm)
test %>%
tabyl(purchase_mm)
orange_index <- sample(1:nrow(orange_tidy), size = nrow(orange_tidy)*0.2)
test  <- slice(orange_tidy, orange_index)
train <- slice(orange_tidy, -orange_index)
train %>%
tabyl(purchase_mm)
test %>%
tabyl(purchase_mm)
model_1 <- glm(purchase_mm ~., data = train, family = binomial(link = "logit"))
summary(model_1)
auc(model_1)
bic(model_1)
library(glmulti)
install.packages("rJava")
library(glmulti)
install.packages("glmulti")
library(glmulti)
```{r}
bic(model_1)
model_2 <- glm(purchase_mm ~ weekof_purchase + store_id + loyal_ch)
model_2 <- glm(purchase_mm ~ weekof_purchase + store_id + loyal_ch, train)
model_2 <- glm(purchase_mm ~ weekof_purchase + store_id + loyal_ch, train, family = binomial(link = "logit"))
summary(model_2)
model_3 <- glm(purchase_mm ~ weekof_purchase + loyal_ch, train, family = binomial(link = "logit"))
summary(model_3)
model_3 <- glm(purchase_mm ~ weekof_purchase + loyal_ch + price_ch + price_mm, train, family = binomial(link = "logit"))
summary(model_3)
model_3 <- glm(purchase_mm ~ loyal_ch + price_ch + price_mm, train, family = binomial(link = "logit"))
summary(model_3)
model_3 <- glm(purchase_mm ~ price_ch + price_mm + disc_mm + loyal_ch + pct_disc_ch, train, family = binomial(link = "logit"))
summary(model_3)
auc(model_3)
library(pROC)
auc(model_3)
auc(model_3)
roc <- train %>%
add_predictions(model_3, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
auc(roc)
roc_3 <- train %>%
add_predictions(model_3, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
auc(roc_3)
roc_1 <- train %>%
add_predictions(model_1, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
auc(roc_1)
roc_2 <- train %>%
add_predictions(model_2, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
auc(roc_2)
roc_3 <- test %>%
add_predictions(model_3, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
auc(roc_3)
roc_1 <- test %>%
add_predictions(model_1, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
auc(roc_1)
roc_2 <- test %>%
add_predictions(model_2, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
auc(roc_2)
model_1_pred <- test %>%
add_predictions(model_2, type = "response") %>%
mutate(odds = pred / (1 - pred))
ggroc(model_1_pred)
model_1_pred <- test %>%
add_predictions(model_2, type = "response") %>%
mutate(odds = pred / (1 - pred))
roc_obj_1 <- model_1_pred %>%
roc(response = purchase_mm,
predictor = pred)
ggroc(roc_obj_1)
model_1_pred <- test %>%
add_predictions(model_1, type = "response") %>%
mutate(odds = pred / (1 - pred))
roc_obj_1 <- model_1_pred %>%
roc(response = purchase_mm,
predictor = pred)
ggroc(roc_obj_1)
model_2_pred <- test %>%
add_predictions(model_2, type = "response") %>%
mutate(odds = pred / (1 - pred))
roc_obj_2 <- model_2_pred %>%
roc(response = purchase_mm,
predictor = pred)
ggroc(roc_obj_2)
model_3_pred <- test %>%
add_predictions(model_3, type = "response") %>%
mutate(odds = pred / (1 - pred))
roc_obj_3 <- model_3_pred %>%
roc(response = purchase_mm,
predictor = pred)
ggroc(roc_obj_3)
library(tidytext)
library(tidyverse)
phrases <- c(
"here is some text",
"again more text",
"text is text"
)
class(phrases)
word_df <- example_text %>%
unnest_tokens(word, phrase)
library(janeaustenr)
library(tidyverse)
library(tidytext)
library(textdata)
get_sentiments("afinn") %>%
count(value, sort = 2)
get_sentiments("bing") %>%
count(sentiment, sort = TRUE)
get_sentiments("loughran") %>%
count(sentiment, sort = TRUE)
get_sentiments("nrc")
library(janeaustenr)
library(tidyverse)
library(tidytext)
#library(textdata)
austen_books
austen_books()
austen_books() %>%
distinct(book)
austen_books() %>%
filter(book %in% c("Sense & Sensibility", "Mansfield Park"))
austen_sens_mans <- austen_books() %>%
filter(book %in% c("Sense & Sensibility", "Mansfield Park"))
austen_sens_mans
library(tidytext)
library(tidyverse)
phrases <- c(
"here is some text",
"again more text",
"text is text"
)
class(phrases)
word_df <- example_text %>%
unnest_tokens(word, phrase)
poem
lines <-
c(
"Whose woods these are I think I know.",
"His house is in the village though;",
"He will not see me stopping here",
"To watch his woods fill up with snow."
)
poem <- tibble(
phrases = lines,
id = 1:4
)
poem_df <- poem %>%
unnest_tokens(word, phrases)
poem
austen_sens_mans %>%
unnest_tokens(word, text)
austen_sens_mans %>%
unnest_tokens(word, text) %>%
count(word, sort = TRUE)
austen_sens_mans %>%
unnest_tokens(word, text) %>%
count(word, sort = TRUE) %>%
arrange(desc(n))
austen_sens_mans %>%
anti_join(stop_words) %>%
unnest_tokens(word, text) %>%
count(word, sort = TRUE) %>%
arrange(desc(n))
stop_words
austen_sens_mans %>%
unnest_tokens(word, text) %>%
count(word, sort = TRUE) %>%
arrange(desc(n))
austen_sens_mans %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
arrange(desc(n))
austen_sens_mans %>%
unnest_tokens(word, text) %>%
#anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
arrange(desc(n))
austen_sens_mans_sent <- austen_sens_mans_sent %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
inner_join(get_sentiments("loughran"))
austen_sens_mans_sent <- austen_sens_mans %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
inner_join(get_sentiments("loughran"))
austen_sens_mans_sent <- austen_sens_mans %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
inner_join(get_sentiments("loughran"), join_by(word))
austen_sens_mans_sent <- austen_sens_mans %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, join_by(word)) %>%
inner_join(get_sentiments("loughran"), join_by(word))
austen_sens_mans_sent <- austen_sens_mans %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, join_by(word)) %>%
inner_join(get_sentiments("loughran"))
austen_sens_mans %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, join_by(word)) %>%
inner_join(get_sentiments("loughran"))
austen_sens_mans_sentiment <- austen_sens_mans %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, join_by(word)) %>%
inner_join(get_sentiments("loughran"))
remove(austen_sens_mans_sent)
austen_sens_mans_sentiment
austen_sens_mans_sentiment %>%
group_by(book, sentiment)
austen_sens_mans_sentiment %>%
group_by(book, sentiment) %>%
slice_max(sentiment)
austen_sens_mans_sentiment %>%
group_by(book, sentiment) %>%
slice_max(sentiment) %>%
count(word, sort = TRUE)
austen_sens_mans_sentiment %>%
group_by(book, sentiment) %>%
slice_max(sentiment) %>%
count(sentiment, sort = TRUE)
austen_sens_mans_sentiment %>%
group_by(book, sentiment) %>%
slice_max(sentiment) %>%
count(word, sort = TRUE)
austen_sens_mans_sentiment %>%
group_by(book, sentiment) %>%
#slice_max(sentiment) %>%
count(word, sort = TRUE) %>%
slice_max(sentiment)
austen_sens_mans_sentiment %>%
group_by(book, sentiment) %>%
#slice_max(sentiment) %>%
count(word, sort = TRUE) %>%
slice_max(word)
austen_sens_mans_sentiment %>%
filter(book == "Sense & Sensibility")
austen_sens_mans_sentiment %>%
filter(book == "Sense & Sensibility") %>%
count(word, sort = TRUE)
austen_sens_mans_sentiment %>%
filter(book == "Sense & Sensibility") %>%
count(word, sentiment sort = TRUE)
austen_sens_mans_sentiment %>%
filter(book == "Sense & Sensibility") %>%
count(word, sentiment, sort = TRUE)
austen_sens_mans_sentiment %>%
filter(book == "Mansfield Park") %>%
count(word, sentiment, sort = TRUE)
