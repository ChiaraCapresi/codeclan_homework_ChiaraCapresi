---
title: "R Notebook"
output: html_notebook
---

```{r}
library(tidyverse)
```

```{r}

late_deliveries <- read_csv("data/late_deliveries.csv")
recovery_times <- read_csv("data/recovery_times.csv")
fitness_levels <- read_csv("data/fitness_levels.csv")

```

#3.1 Comparison



```{r}
ggplot(late_deliveries)+
aes(x = date, y = late_deliveries)+
geom_line(size = 1.5, colour = "blue")+
  geom_point(size=2, colour ="gold")+
  geom_smooth()
```
The line chart is the better for analysisng 'late_deliveries'.



```{r}
ggplot(recovery_times) %>% 
  aes(x = treatment__group, y = recovery, group = prognosis, fill = prognosis)+
  geom_col(position = "dodge")
```

```{r}
recovery_times %>% 
  mutate(prognosis = factor(prognosis, levels = c("Poor", "Average", "Good", "Excellent"))) %>% 
  ggplot(aes(x = treatment_group, y = recovery, group = prognosis, fill = prognosis)) +
  geom_col(position = "dodge")
```

```{r}
recovery_times %>% 
  mutate(prognosis = factor(prognosis, levels = c("Poor", "Average", "Good", "Excellent"))) %>% 
  ggplot(aes(x = prognosis, y = recovery, fill = treatment_group)) +
  geom_col(position = "dodge")
```

In this case it would be better to have a chart like our second one. In fact, a doctor, looking at the prognosis of its patient knows which is the best treatment to suggest.




```{r}
recovery_times %>% 
  mutate(prognosis = factor(prognosis, levels = c("Poor", "Average", "Good", "Excellent"))) %>% 
  ggplot(aes(x = prognosis, y = recovery, fill = prognosis)) +
  geom_col(position = "dodge") +
  facet_wrap(~ treatment_group)
```
```{r}
ggplot(fitness_levels)+
  aes(x = age, y = fitness_score, group = child, colour = group)+
geom_col(position = "dodge")+
  facet_grid(~group)
```


```{r}
ggplot(fitness_levels)+
  aes(x = age, y = fitness_score, group = child, colour = factor(group))+
geom_line()+
  geom_point()+
  facet_grid(~group)
```



```{r}
fitness_levels %>% 
  ggplot() +
  aes(x = age, y = fitness_score, group = child, colour = factor(group)) +
  geom_point() + 
  geom_line() +
  facet_wrap( ~ group)
```



```{r}
fitness_levels %>%
  group_by(group, age) %>% 
  mutate(mean_group_score = mean(fitness_score)) %>%
  mutate(group = as_factor(group)) %>% 
  ggplot() +
  aes(x = age, y = mean_group_score, group = group, colour = group) +
  geom_line()
```

```{r}
fitness_levels %>% 
  ggplot() +
  aes(x = age, y = fitness_score, group = child, fill = factor(group)) +
  geom_col() + 
  facet_wrap( ~ child, ncol = 4) +
  scale_fill_brewer(palette = "Set2")
```


```{r}
fitness_levels %>% 
  ggplot() +
  aes(x = age, y = fitness_score, group = group, fill = child) +
  geom_col(position = "dodge") + 
  facet_wrap( ~ group) 
```


#3.2 Connections




```{r}
blood_pressure <- read_csv("data/blood_pressure.csv")
car_use <- read_csv("data/car_use.csv")
```


```{r}
blood_pressure %>% 
  ggplot()+
  aes(x = daily_saturated_fat_intake_mg, y = systolic_blood_pressure_mm_hg)+
  geom_point()+
  geom_smooth(method = lm)
```




```{r}
car_use %>% 
  ggplot()+
  aes(x = (car_use_percent*population), y = air_so2_concentration_ppm)+
  geom_point(aes(size = population, colour = factor(city)))
```


```{r}
# colour cities
car_use %>% 
  ggplot(aes(x = (car_use_percent*population), y = air_so2_concentration_ppm)) +
  geom_point(aes(size = population, colour = factor(city))) +
  geom_smooth(method = lm, se = FALSE) +
  theme_classic()
```



```{r}
car_use %>% 
  ggplot() +
  aes(x = car_use_percent, y = air_so2_concentration_ppm) +
  geom_label(aes(label = city, size = factor(population)), show.legend = FALSE) +
  theme_light() +
  geom_smooth(method = lm) 
```



```{r}
car_use %>% 
  ggplot() +
  aes(x = car_use_percent, y = air_so2_concentration_ppm) +
  geom_point(aes(size = factor(population), colour = city), show.legend = )+
  ggrepel::geom_text_repel(aes(label = city))
  
```


```{r}
car_use %>%
  summarise(
    min_pop = min(population),
    max_pop = max(population)
  )

# cut population into quartiles
car_use <- car_use %>%
  mutate(
    population_cat = cut_number(
      x = population,
      n = 4, 
      labels = c("Quart1", "Quart2", "Quart3", "Quart4")
    )
  )

ggplot(car_use) +
  aes(
    x = car_use_percent,
    y = air_so2_concentration_ppm,
    shape = population_cat
  ) +
  geom_point() + 
  labs(x = "car use (%)", y = "air CO2 concentration (ppm)", shape = "population quartile")
```







#3.3 Distribution


```{r}
 d20_outcomes <- read_csv("data/d20_outcomes.csv")
d20x5_outcomes <- read_csv("data/d20x5_outcomes.csv")
```


```{r}
d20_outcomes %>% 
  ggplot(aes(x = outcome))+
  geom_histogram()
```
```{r}
d20x5_outcomes %>% 
  ggplot() +
  geom_histogram(aes(x = outcome), binwidth = 5, colour = "white") +
  scale_x_continuous(breaks = c(15,30,45,60,75,90), limits = c(15,90))
                                                               
```

```{r}
ggplot(d20_outcomes) +
  aes(x = outcome) +
  geom_histogram(bins = 20, col = "white")
```

```{r}
ggplot(d20x5_outcomes) +
  aes(x = outcome) +
  geom_histogram(binwidth = 5, col = "white") + 
  labs(x = "Outcome",
       y = "Count")
```




#3.4 Composition

```{r}
pension_surplus <- read_csv("data/pension_surplus.csv")
pension_liabilities <- read_csv("data/pension_liabilities.csv")

```

```{r}
pension_surplus %>% 
  ggplot()+
  geom_col(aes(x = reorder(item, balance), y = balance))+
  coord_flip()
```

```{r}
pension_surplus %>% 
  waterfalls::waterfall(aes(x = reorder(item, balance), y = balance))+
  coord_flip()
```

```{r}
pension_surplus <- pension_surplus %>%
                      mutate(item = factor(item, levels = item))

ggplot(pension_surplus) +
  aes(x = item, y = balance, fill = balance > 0) +
  geom_col(show.legend = FALSE) +
  scale_x_discrete(
    labels = c(
      "2016 Balance plus interest (surplus/(deficit))" = "2016 Balance plus\ninterest (surplus/(deficit))",
      "Actual vs expected investment returns"	= "Actual vs expected\ninvestment returns",
      "Actual vs expected mortality" = "Actual vs\nexpected mortality",
      "Improvement in retirement terms" = "Improvement in\nretirement terms",
      "Bulk transfers into scheme" = "Bulk transfers\ninto scheme",
      "2019 Balance (surplus/(deficit))" = "2019 Balance\n(surplus/(deficit))",
      "Individual transfers out" = "Individual\ntransfers out",
      "Miscellaneous gain/(loss)" = "Miscellaneous\ngain/(loss)"
      
    )
  ) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  ylim(-250, 250)
```


```{r}
pension_liabilities %>% 
  ggplot()+
  geom_col(aes(x = year, y = liability_millions, fill = liability_type), position = "dodge")
  
```

```{r}
pension_liabilities <- pension_liabilities %>%
  mutate(liability_type = recode(liability_type, "widowed_people" = "widowed people"))

ggplot(pension_liabilities) +
  aes(x = year, y = liability_millions, fill = liability_type) +
  geom_col() + 
  scale_x_continuous(breaks = unique(pension_liabilities$year)) +
  scale_fill_colorblind() +
  labs(y = "liability (millions)", fill = "type of liability")
```















