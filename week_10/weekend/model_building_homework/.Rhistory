red_wines <- read_csv("data/wine_quality_red.csv")
library(tidyverse)
library(modelr)
red_wines <- read_csv("data/wine_quality_red.csv")
white_wines <- read_csv("data/wine_quality_white.csv")
View(red_wines)
View(white_wines)
glimpse(red_wines)
glimpse(white_wines)
red_wines %>%
mutate(wine_type == "red_wine")
red_wines %>%
mutate(wine_type, wine_type == "red_wine")
red_wines %>%
mutate(wine, wine == "red_wine")
wine_r <- rep("red_wine", nrow(red_wines))
red_wines %>%
mutate(wine, wine == "red_wine")
wine_r
wine_r <- rep("red_wine", nrow(red_wines))
red_wines %>%
bind_cols(wine = wine_r)
wine_r <- rep("red_wine", nrow(red_wines))
red_wines <- red_wines %>%
bind_cols(wine = wine_r)
wine_w <- rep("white_wine", nrow(white_wines))
white_wines <- white_wines %>%
bind_cols(wine = wine_w)
bind_rows(red_wines, white_wines)
1599+4898
glimpse(red_wines)
glimpse(white_wines)
wines <- bind_rows(red_wines, white_wines)
View(wines)
names(wines)
library(tidyverse)
library(fastDummies) # making dummy variables
library(mosaicData)
library(tidyverse)
library(janitor)
library(GGally)
library(ggfortify)
library(mosaic)
grades <- read_csv("supervised_vs_unsupervised/data/grades.csv")
grades
summary(grades)
grades %>%
summarise(across(.col = everything(), .fns = ~sum(is.na(.x))))
grades %>%
mutate(final = coalesce(final, mean(final, na.rm = TRUE)),
take_home, mean(take_home, na.rm = TRUE))
grades <- grades %>%
mutate(across(where(is.numeric), ~ coalesce(., mean(., na.rm = TRUE))))
grades
skimr::skim(grades)
grades %>%
#select(subject) %>% # for demo purposes
mutate(subject_bio = as.integer(subject == 'biology'),
subject_eng = as.integer(subject == 'english'),
subject_fre = as.integer(subject == 'french'),
subject_math = as.integer(subject == 'maths'),
subject_phy = as.integer(subject == 'physics')
) %>%
select(-subject_bio, -subject)
grades_subject_dummy2 <- grades %>%
fastDummies::dummy_cols(select_columns = 'subject',
remove_selected_columns = TRUE, # we remove the 'subject' column!
remove_first_dummy = TRUE) # remove the column 'subject_biology'
grades_subject_dummy2 %>%
mutate(final_grade = case_when(
final < 50 ~ "FAIL",
final < 60 ~ "C",
final < 70 ~ "B",
final >= 70 ~ "A"
), .after = final)
grades %>%
mutate(final_grade = case_when(final >= 70 ~ "A",
final >= 60 ~ "B",
final >= 50 ~ "C",
final < 50 ~ "F",
)) %>%
fastDummies::dummy_cols(select_columns = "final_grade",
remove_selected_columns = TRUE,
remove_first_dummy = FALSE
) %>%
select(-final_grade_F)
grades2 <- grades %>%
mutate(subject2 = as.factor(subject), .after = subject,
subject3 = relevel(subject2, 'english'))
lm4 <- lm(final ~ assignment + subject2, grades2)
lm5 <- lm(final ~ assignment + subject3, grades2)
summary(lm4)
summary(lm5)
fastDummies::dummy_columns(grades, remove_first_dummy = FALSE)
CodeClanData::tyrell_corp_jobs %>%
ggplot(aes(Salary, fill = Position))+
geom_histogram(position = "dodge")
CodeClanData::tyrell_corp_jobs %>%
mutate(salary = scale(Salary), .by = Position) #calculate the SD with respect of the Position
assignment_mean <- mean(grades$assignment)
assignment_sd <- sd(grades$assignment)
ass_sc <- grades %>%
select(assignment) %>%
mutate(assignment_scaled = (assignment - assignment_mean)/assignment_sd)
ass_sc
ass_sc %>%
ggplot(aes(assignment))+
geom_density()+
geom_vline(xintercept = assignment_mean, size = 1, colour = 2)+
labs(title = "Raw data")
ass_sc %>%
ggplot(aes(assignment_scaled))+
geom_density()+
geom_vline(xintercept = mean(ass_sc$assignment_scaled), size = 1, colour = 2)+
labs(title = "Raw data")
grades %>%
select(assignment) %>%
mutate(sc_ass_TT = scale(assignment),
sc_ass_FT = scale(assignment, scale = F, center = T),
sc_ass_TF = scale(assignment, scale = T, center = F))
# comes from mosaic Data package
RailTrail
railtrail_clean <- RailTrail %>%
clean_names() %>%
mutate(across(spring:fall, as.logical))
railtrail_clean
railtrail_trim <- railtrail_clean %>%
select(-c(hightemp, lowtemp, fall, day_type))
mod1 <- lm(volume ~ ., railtrail_clean)
alias(mod1)
# GGally
ggpairs(railtrail_trim, progress = FALSE)
railtrail_trim %>%
ggplot(aes(x = avgtemp, y = volume))+
geom_point()+
geom_smooth(method = 'lm') #method = 'lm', se = FALSE if you don't want  grey strip
mod1 <- lm(volume ~ avgtemp, railtrail_trim)
autoplot(mod1)+
theme_minimal()
hist(mod1$residuals)
summary(mod1)
fivenum(mod1$residuals)
sd(mod1$residuals)
railtrail_trim %>%
ggplot(aes(y = volume))+
geom_boxplot()
railtrail_trim %>%
ggplot(aes(x = weekday, y = volume)) +
geom_boxplot()
summarise(railtrail_trim, cor = cor(weekday, volume))
mod2 <- lm(volume ~ avgtemp + weekday, railtrail_trim)
autoplot(mod1) + theme_minimal()
autoplot(mod2) + theme_minimal()
summary(mod2)
summary(mod2)
coefficients(mod2)
# mosaic package
plotModel(mod2)
mod3 <- lm(volume ~ avgtemp + weekday + summer, railtrail_trim)
autoplot(mod3)
plotModel(mod3)
summary(mod3)
pnorm
qnorm
pt(3.898, 86, lower.tail = FALSE)*2 # 86 degrees of freedom
mod1
ggplot(railtrail_trim, aes(avgtemp, volume))+
geom_point()+
geom_smooth(method = 'lm', se = FALSE)+
geom_point(x = mean(railtrail_trim$avgtemp),
y = mean(railtrail_trim$volume),
colour = 2, size = 4)+
geom_point(x = 50, y = 99.602 + 4.802 * 50,
colour = 4, size = 4)
ggplot(railtrail_trim, aes(avgtemp, volume, colour = weekday))+
geom_point()+
geom_smooth(method = 'lm', se = FALSE)+
geom_point(x = mean(railtrail_trim$avgtemp),
y = mean(railtrail_trim$volume),
colour = 2, size = 4)+
geom_point(x = 50, y = 99.602 + 4.802 * 50,
colour = 4, size = 4)
mod2
#Call:
#lm(formula = volume ~ avgtemp + weekday, data = railtrail_trim)
#Coefficients:
#(Intercept)      avgtemp  weekdayTRUE
#    163.022        4.541      -70.320
if x = 40
library(GGally)
skimr::skim(wines)
library(tidyverse)
library(car)
library(modelr)
library(GGally)
library(ggfortify)
data(Prestige)
prestige <- Prestige
glimpse(Prestige)
Prestige %>%
summarise(across(.col = everything(), .fns = ~sum(is.na(.x))))
?Prestige
prestige_trim <- Prestige %>%
drop_na(type) %>%
select(-census)
prestige_trim
ggpairs(prestige_trim, progress = FALSE)
ggpairs(prestige_trim, progress = FALSE, aes(colour = type, alpha = 0.5))
mod1 <- lm(prestige ~ education, prestige_trim)
mod2 <- lm(prestige ~ type, prestige_trim)
summary(mod1)
summary(mod2)
autoplot(mod1)
autoplot(mod2)
anova(mod1,mod2)
prestige_remaining_resid <- prestige_trim %>%
add_residuals(mod1) %>%
select(-prestige, -education)
prestige_remaining_resid
ggpairs(prestige_remaining_resid, progress = FALSE)
mod2a <- lm(prestige ~ education + income, prestige_trim)
mod2b <- lm(prestige ~ education + type, prestige_trim)
summary(mod2a)
summary(mod2b)
autoplot(mod2a)
autoplot(mod2b)
anova(mod2a, mod2b)
summary(mod2a)
prestige_remaining_resid <- prestige_trim %>%
add_residuals(mod2b) %>%
select(-prestige, -education, -type)
prestige_remaining_resid
ggpairs(prestige_remaining_resid, progress = FALSE)
mod3a <- lm(prestige ~ education + income + women, prestige_trim)
mod3b <- lm(prestige ~ education + income + type, prestige_trim)
summary(mod3a)
summary(mod3b)
autoplot(mod3a)
autoplot(mod3b)
anova(mod3a, mod3b)
summary(mod3b)
library(tidyverse)
library(modelr)
library(GGally)
red_wines <- read_csv("data/wine_quality_red.csv")
white_wines <- read_csv("data/wine_quality_white.csv")
glimpse(red_wines)
glimpse(white_wines)
wine_r <- rep("red_wine", nrow(red_wines))
red_wines <- red_wines %>%
bind_cols(wine = wine_r)
wine_w <- rep("white_wine", nrow(white_wines))
white_wines <- white_wines %>%
bind_cols(wine = wine_w)
wines <- bind_rows(red_wines, white_wines)
names(wines)
skimr::skim(wines)
wines %>%
mutate(wine_id, wine_id = as.factor(wine_id)) %>%
mutate(p_h, p_h = as.factor(p_h))
wines <- wines %>%
mutate(wine_id, wine_id = as.factor(wine_id)) %>%
mutate(p_h, p_h = as.factor(p_h))
wines %>%
distinct(region)
wines %>%
distinct(p_h)
ggpairs(wines, progress = FALSE)
wines %>%
select(-wine_id)
wines <- wines %>%
select(-wine_id)
wines %>%
distinct(p_h) %>%
arrange(p_h)
wines %>%
mutate(p_h = case_when(
p_h < 3 ~ "2-3",
p_h < 4 ~ "3-4",
p_h >= 4 ~ "4+"
))
wines <- wines %>%
mutate(p_h = case_when(
p_h < 3 ~ "2-3",
p_h < 4 ~ "3-4",
p_h >= 4 ~ "4+"
))
red_wines <- read_csv("data/wine_quality_red.csv")
white_wines <- read_csv("data/wine_quality_white.csv")
wine_r <- rep("red_wine", nrow(red_wines))
red_wines <- red_wines %>%
bind_cols(wine = wine_r)
wine_w <- rep("white_wine", nrow(white_wines))
white_wines <- white_wines %>%
bind_cols(wine = wine_w)
wines <- bind_rows(red_wines, white_wines)
wines <- wines %>%
mutate(wine_id, wine_id = as.factor(wine_id))
wines <- wines %>%
select(-wine_id)
wines %>%
mutate(p_h = case_when(
p_h < 3 ~ "2-3",
p_h < 4 ~ "3-4",
p_h >= 4 ~ "4+"
)) %>%
distinct(p_h)
wines <- wines %>%
mutate(p_h = case_when(
p_h < 3 ~ "2-3",
p_h < 4 ~ "3-4",
p_h >= 4 ~ "4+"
)) %>%
distinct(p_h)
red_wines <- read_csv("data/wine_quality_red.csv")
white_wines <- read_csv("data/wine_quality_white.csv")
wine_r <- rep("red_wine", nrow(red_wines))
red_wines <- red_wines %>%
bind_cols(wine = wine_r)
wine_w <- rep("white_wine", nrow(white_wines))
white_wines <- white_wines %>%
bind_cols(wine = wine_w)
wines <- bind_rows(red_wines, white_wines)
wines <- wines %>%
mutate(wine_id, wine_id = as.factor(wine_id))
wines <- wines %>%
select(-wine_id)
wines <- wines %>%
mutate(p_h = case_when(
p_h < 3 ~ "2-3",
p_h < 4 ~ "3-4",
p_h >= 4 ~ "4+"
))
ggpairs(wines, progress = FALSE)
arrange()
wines %>%
distinct(fixed_acidity) %>%
arrange()
wines %>%
distinct(fixed_acidity) %>%
arrange()
wines %>%
distinct(fixed_acidity) %>%
arrange(fixed_acidity)
wines <- wines %>%
mutate(fixed_acidity = case_when(
fixed_acidity < 5 ~ "less 5",
fixed_acidity < 10 ~ "5-10",
fixed_acidity >= 10 ~ "10-16"
))
wines %>%
distinct(volatile_acidity)
wines %>%
distinct(volatile_acidity) %>%
arrange(volatile_acidity)
wines <- wines %>%
mutate(volatile_acidity = case_when(
volatile_acidity < 0.5 ~ "less 0.5",
volatile_acidity < 1 ~ "0.5-1",
volatile_acidity >= 1 ~ "more 1"
))
wines_num <- wines %>%
select_if(is.numeric)
wines_cat <- wines %>%
select_if(function(x) !is.numeric(x))
wines_num$quality <- wines$quality
ggpairs(wines_num, progress = FALSE)
ggpairs(wines_cat, progress = FALSE)
wines_num <- wines %>%
select_if(is.numeric)
wines_cat <- wines %>%
select_if(function(x) !is.numeric(x))
wines_cat$quality <- wines$quality
ggpairs(wines_num, progress = FALSE)
ggpairs(wines_cat, progress = FALSE)
ggpairs(wines_num, progress = FALSE, aes(colour = wine, alpha = 0.5))
ggpairs(wines_num, progress = FALSE, aes(colour = wine))
wines_num$wine <- wines$wine
ggpairs(wines_num, progress = FALSE, aes(colour = wine, alpha = 0.5))
ggpairs(wines_cat, progress = FALSE, aes(colour = wine, alpha = 0.5))
test_index <- sample(1:nrow(wines), size = nrow(wines)*0.2)
# Use the test index to create test and training datasets
test  <- slice(wines, test_index)
train <- slice(wines, -test_index)
ggpiars(wines_num, progress = FALSE)
ggpairs(wines_num, progress = FALSE)
ggpairs(wines_cat, progress = FALSE)
model <- lm(quality, alcohol + wine + volatile_acidity, train)
train
model <- lm(quality ~ alcohol + wine + volatile_acidity, train)
predictions_test <- test %>%
add_predictions(model) %>%
select(quality, pred)
mse_test <- mean((predictions_test$pred - test$quality)**2)
mse_test
summary(model)
wines %>%
distinct(wine)
model_2 <- lm(quality ~ alcohol * wine + volatile_acidity * wine, train)
predictions_test_2 <- test %>%
add_predictions(model_2) %>%
select(quality, pred)
mse_test <- mean((predictions_test_2$pred - test$quality)**2)
mse_test
summary(model_2)
model_3 <- lm(quality ~ alcohol * wine + volatile_acidity * wine, train)
predictions_test_3 <- test %>%
add_predictions(model_3) %>%
select(quality, pred)
mse_test <- mean((predictions_test_3$pred - test$quality)**2)
mse_test
summary(model_3)
model_3 <- lm(quality ~ alcohol + volatile_acidity, train)
predictions_test_3 <- test %>%
add_predictions(model_3) %>%
select(quality, pred)
mse_test <- mean((predictions_test_3$pred - test$quality)**2)
mse_test
summary(model_3)
