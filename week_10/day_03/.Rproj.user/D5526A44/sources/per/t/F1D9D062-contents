---
title: "Chiara homework week 10 day 3"
output: html_notebook
---


# MPV

```{r}
library(tidyverse)
library(modelr)

# visualisation packages
library(GGally)
library(ggfortify)
```


## 1. You are given a set of data on housing sale prices for the last few years in King County (near Seattle) between May 2014 and May 2015.

```{r}
housing_prices <- read_csv("data/kc_house_data.csv")

housing_prices
```


```{r}
glimpse(housing_prices)
```

```{r}
skimr::skim(housing_prices)
```

```{r}
housing_prices %>% 
  summarise(across(.col = everything(), .fns = ~sum(is.na(.x))))
```
There are no missing values!

## 2. Tidy up the data ready for regression:


- I am going to remove all of `date`, `id`, `sqft_living15`, `sqft_lot15` and `zipcode`. I would also remove `sqft_above` and `sqft_basement`, because I think they are not relevant if we already have `sqft_living` and `sqft_lot`.


```{r}
housing_prices_trim <- housing_prices %>% 
  select(-c("date", "id", "sqft_living15", "sqft_lot15", "zipcode", "sqft_above", "sqft_basement"))

housing_prices_trim
```


- the variable `waterfront` seems to be a categorical indicator, so it would be better to convert its type from "double" to "logical"


```{r}
housing_prices_trim <- housing_prices_trim %>% 
  mutate(waterfront = as.logical(waterfront))
```



- It could be useful to convert `yr_renovated` into a `renovated` logical variable, indicating whether the property had ever been renovated.


```{r}
housing_prices_trim <- housing_prices_trim %>% 
  mutate(renovated = if_else(yr_renovated == 0, FALSE, TRUE))
```



- The columns `view`, `condition` and `grade` are categorical ordinal data types. Furthermore, the variable `grade` can be divided into three categories.

```{r}
housing_prices_trim <- housing_prices_trim %>% 
  mutate(grade_slot = as.factor(case_when(
    grade >=1 & grade <= 3 ~ "low quality",
    grade >3 & grade <= 7 ~ "medium quality",
    grade > 7 ~ "high quality"
  ))) %>% 
  mutate(across(.col = c("view", "condition"), .fns = ~as.factor(.x)))
```


# 3. Check for aliased variables using the alias() function (this takes in a formula object and a data set). [Hint - formula price ~ . says ‘price varying with all predictors’, this is a suitable input to alias()]. Remove variables that lead to an alias. Check the ‘Elements of multiple regression’ lesson for a dropdown containing further information on finding aliased variables in a dataset.


```{r}
alias(price ~., housing_prices_trim)
```

There are no `aliased variables` in the dataset.


## 3. Systematically build a regression model containing up to four main effects (remember, a main effect is just a single predictor with coefficient), testing the regression diagnostics as you go * splitting datasets into numeric and non-numeric columns might help ggpairs() run in manageable time, although you will need to add either a price or resid column to the non-numeric dataframe in order to see its correlations with the non-numeric predictors.


```{r}
houses_tidy_numeric <- housing_prices_trim %>%
  select_if(is.numeric)

houses_tidy_nonnumeric <- housing_prices_trim %>%
  select_if(function(x) !is.numeric(x)) 


houses_tidy_nonnumeric$price <- housing_prices_trim$price

ggpairs(houses_tidy_numeric, progress = FALSE)

ggsave("ggpairs_num.png", width = 15, height = 15)

ggpairs(houses_tidy_nonnumeric, progress = FALSE)
```



```{r}
model <- lm(price ~ waterfront + sqft_living + grade + view, housing_prices_trim)
```



```{r}
summary(model)
```

# Correction and recap

## 1. What does 1 row represent?

1 house sold

## 2. understand the data

for example using a 'skim()' function


```{r}
houses <- read_csv("data/kc_house_data.csv")

houses

skimr::skim(housing_prices)
```


## 3. Featuring engineering

Taking the row materials we have and making them more useful (for example using a transformation).

It seems that the variables are positive distributed. This means that we could use a 'log' transformation in order to make them have a more 'normal' distribution form.



```{r}
houses %>% 
  ggplot(aes(x = price))+
  geom_histogram()+
  scale_x_continuous(trans = "log10")

houses_logged <- houses %>% 
  mutate(ln_house_price = log(price))
```

For regression problems is not rare to have positive skewness, so the log transformation is often useful.


```{r}
houses %>% 
  ggplot(aes(y = price, x = grade))+
  geom_point()
```





```{r}
houses_tidy <- houses %>%
  select(-c("id", "date", "sqft_living15", "sqft_lot15", "zipcode")) %>%
  mutate(waterfront = as.logical(waterfront)) %>%
  mutate(renovated = yr_renovated != 0) %>%
  select(-"yr_renovated") %>%
  mutate(view = as_factor(view)) %>% 
  mutate(condition = as_factor(condition)) %>%
  mutate(grade = as_factor(grade))
```


```{r}
houses %>% 
  ggplot(aes(y = price, x = as.factor(grade)))+
  geom_boxplot()
```


```{r}
summary(lm(price ~ grade, houses_tidy))
summary(lm(price ~ as.factor(grade), houses_tidy))
```
We note that the first group of grades is not statistically significant. Actually we said that also from the box plot. One possible thing to do could be that of grouping these first grades together and analyse the difference between that group and the other grades, which instead seems to be statistically significant.


## 4. ggpairs

```{r}
houses_tidy_numeric <- houses_tidy %>%
  select_if(is.numeric)

houses_tidy_nonnumeric <- houses_tidy %>%
  select_if(function(x) !is.numeric(x))

houses_tidy_nonnumeric$price <- houses_tidy$price

ggpairs(houses_tidy_numeric, progress = F)
ggpairs(houses_tidy_nonnumeric, progress = F)
```


- we can `ggsave()` our `ggpairs` plots for seeing better them.


#### For the first grades' factors which are not statistically significant, we could:
- group them together and compare them with the others
- `anova` test.
   - all or none


```{r}
mod1 <- lm(price ~ grade, houses_tidy)

mod2 <- lm(price ~ sqft_above + grade, houses_tidy)

houses_tidy %>%   
  mutate(grade_grouped = as.factor(if_else(as.numeric(grade) < 8, 7, as.numeric(grade))))

anova(mod1, mod2)
```





```{r}
plot(mod2)
```


Questions:

1. Is the model ready? From the first plot NO
2. Is the right model? I don't know



Our first diagnostic plot is not ok!

Let's have a look of the second: the QQ-plot.

(Alternative way. Plot residuals and see if they are normally distributed).

there is a symmetry but it seems right skeewed.

Third diagnostic plot:

how wrong are we? by our guess!

we want to be wrong of the same amount regardless of what we guess.



```{r}
# HOW TO ADD RESIDUALS

#library(modelr)

#mod2$residuals

houses_model <- houses_tidy %>% 
  mutate(resid = mod2$residuals)

houses_model


houses_model <- houses_tidy %>% 
  add_residuals(mod2)

houses_model
```



```{r}
summary(mod2)
```

# So what? What now?
















































































