library(tidyverse)
library(janitor)
housing_prices <- read_csv("data/housing_prices.csv")
housing_prices <- read_csv("data/housing_prices.csv") %>%
clean_names()
View(housing_prices)
glimpse(housing_prices)
library(tidyverse)
library(fastDummies)
library(mosaicData)
library(tidyverse)
library(janitor)
library(GGally)
library(ggfortify)
library(mosaic)
library(tidyverse)
library(fastDummies) # making dummy variables
library(mosaicData)
library(tidyverse)
library(janitor)
library(GGally)
library(ggfortify)
library(mosaic)
grades <- read_csv("supervised_vs_unsupervised/data/grades.csv")
grades
summary(grades)
grades %>%
summarise(across(.col = everything(), .fns = ~sum(is.na(.x))))
grades %>%
mutate(final = coalesce(final, mean(final, na.rm = TRUE)),
take_home, mean(take_home, na.rm = TRUE))
grades <- grades %>%
mutate(across(where(is.numeric), ~ coalesce(., mean(., na.rm = TRUE))))
grades
skimr::skim(grades)
grades %>%
#select(subject) %>% # for demo purposes
mutate(subject_bio = as.integer(subject == 'biology'),
subject_eng = as.integer(subject == 'english'),
subject_fre = as.integer(subject == 'french'),
subject_math = as.integer(subject == 'maths'),
subject_phy = as.integer(subject == 'physics')
) %>%
select(-subject_bio, -subject)
grades_subject_dummy2 <- grades %>%
fastDummies::dummy_cols(select_columns = 'subject',
remove_selected_columns = TRUE, # we remove the 'subject' column!
remove_first_dummy = TRUE) # remove the column 'subject_biology'
grades_subject_dummy2 %>%
mutate(final_grade = case_when(
final < 50 ~ "FAIL",
final < 60 ~ "C",
final < 70 ~ "B",
final >= 70 ~ "A"
), .after = final)
grades %>%
mutate(final_grade = case_when(final >= 70 ~ "A",
final >= 60 ~ "B",
final >= 50 ~ "C",
final < 50 ~ "F",
)) %>%
fastDummies::dummy_cols(select_columns = "final_grade",
remove_selected_columns = TRUE,
remove_first_dummy = FALSE
) %>%
select(-final_grade_F)
CodeClanData::tyrell_corp_jobs %>%
ggplot(aes(Salary, fill = Position))+
geom_histogram(position = "dodge")
CodeClanData::tyrell_corp_jobs %>%
mutate(salary = scale(Salary), .by = Position) #calculate the SD with respect of the Position
assignment_mean <- mean(grades$assignment)
assignment_sd <- sd(grades$assignment)
ass_sc <- grades %>%
select(assignment) %>%
mutate(assignment_scaled = (assignment - assignment_mean)/assignment_sd)
ass_sc
ass_sc %>%
ggplot(aes(assignment))+
geom_density()+
geom_vline(xintercept = assignment_mean, size = 1, colour = 2)+
labs(title = "Raw data")
ass_sc %>%
ggplot(aes(assignment_scaled))+
geom_density()+
geom_vline(xintercept = mean(ass_sc$assignment_scaled), size = 1, colour = 2)+
labs(title = "Raw data")
grades %>%
select(assignment) %>%
mutate(sc_ass_TT = scale(assignment),
sc_ass_FT = scale(assignment, scale = F, center = T),
sc_ass_TF = scale(assignment, scale = T, center = F))
# comes from mosaic Data package
RailTrail
railtrail_clean <- RailTrail %>%
clean_names() %>%
mutate(across(spring:fall, as.logical))
railtrail_clean
railtrail_trim <- railtrail_clean %>%
select(-c(hightemp, lowtemp, fall, day_type))
mod1 <- lm(volume ~ ., railtrail_clean)
alias(mod1)
# GGally
ggpairs(railtrail_trim, progress = FALSE)
railtrail_trim %>%
ggplot(aes(x = avgtemp, y = volume))+
geom_point()+
geom_smooth(method = 'lm') #method = 'lm', se = FALSE if you don't want  grey strip
mod1 <- lm(volume ~ avgtemp, railtrail_trim)
autoplot(mod1)+
theme_minimal()
hist(mod1$residuals)
summary(mod1)
fivenum(mod1$residuals)
sd(mod1$residuals)
railtrail_trim %>%
ggplot(aes(y = volume))+
geom_boxplot()
railtrail_trim %>%
ggplot(aes(x = weekday, y = volume)) +
geom_boxplot()
summarise(railtrail_trim, cor = cor(weekday, volume))
mod2 <- lm(volume ~ avgtemp + weekday, railtrail_trim)
autoplot(mod1) + theme_minimal()
autoplot(mod2) + theme_minimal()
summary(mod2)
summary(mod2)
coefficients(mod2)
# mosaic package
plotModel(mod2)
mod3 <- lm(volume ~ avgtemp + weekday + summer, railtrail_trim)
autoplot(mod3)
plotModel(mod3)
summary(mod3)
library(GGally)
ggpairs(housing_prices, progress = FALSE)
housing_prices %>%
select(total_rooms, total_bedrooms) %>%
ggpairs(housing_prices, progress = FALSE)
housing_prices <- housing_prices %>%
select(-total_bedrooms)
housing_prices
ggpairs(housing_prices, progress = FALSE)
housing_prices %>%
ggplot(aes(x = households, y = median_house_value))+
geom_point()
housing_prices %>%
ggplot(aes(x = median_house_value, y = households))+
geom_point()
housing_prices %>%
ggplot(aes(x = median_house_value, y = households))+
geom_line()
housing_prices %>%
ggplot(aes(x = median_house_value, y = households))+
geom_col()
housing_prices %>%
ggplot(aes(x = median_house_value, y = households))+
geom_point()+
geom_smooth(method = 'lm')
housing_prices %>%
ggplot(aes(x = median_house_value, y = median_income))+
geom_point()+
geom_smooth(method = 'lm')
housing_prices %>%
select(median_house_value, ocean_proximity) %>%
ggpairs(housing_prices, progress = FALSE)
model(median_house_value ~ ocean_proximity, housing_prices)
housing_prices %>%
distinct(ocean_proximity)
model(median_house_value ~ median_income, housing_prices)
model <- lm(median_house_value ~ median_income, housing_prices)
model
library(modelr)
sample <- housing_prices %>%
add_predictions(model) %>%
add_residuals(model)
sample
sample %>%
ggplot(aes(x = median_income)) +
geom_point(aes(y = median_house_value)) +
geom_line(aes(y = pred), col = "red")
model_2 <- lm(median_house_value ~ median_income + ocean_proximity)
model_2 <- lm(median_house_value ~ median_income + ocean_proximity, housing_prices)
model_2
autoplot(model)
autoplot(model_2)
